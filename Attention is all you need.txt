Transformer, a model architecture eschewing recurrence and instead
relying entirely on an attention mechanism to draw global dependencies between input and output.
The Transformer allows for significantly more parallelization and can reach a new state of the art in
translation quality after being trained for as little as twelve hours on eight P100 GPUs.

Self-attention, sometimes called intra-attention is an attention mechanism relating different positions
of a single sequence in order to compute a representation of the sequence. 

Most competitive neural sequence transduction models have an encoder-decoder structure.
Here, the encoder maps an input sequence of symbol representations (x1, ..., xn) to a sequence of continuous representations z = (z1, ..., zn). 
Given z, the decoder then generates an output sequence (y1, ..., ym) of symbols one element at a time. 

Encoder: The encoder is composed of a stack of N = 6 identical layers.
Each layer has two sub-layers.
The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network.

Decoder: The decoder is also composed of a stack of N = 6 identical layers.
In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head
attention over the output of the encoder stack.

An attention function can be described as mapping a query and a set of key-value pairs to an output,
where the query, keys, values, and output are all vectors.
The output is computed as a weighted sum of the values, where the weight assigned to each value is computed by a compatibility function of the
query with the corresponding key.

We call our particular attention "Scaled Dot-Product Attention". 
The input consists of queries and keys of dimension dk, and values of dimension dv.
We compute the dot products of the query with all keys, divide each by âˆšdk, and apply a softmax function to obtain the weights on the values.
Instead of performing a single attention function with dmodel-dimensional keys, values and queries,
we found it beneficial to linearly project the queries, keys and values h times with different, learned
linear projections to dk, dk and dv dimensions, respectively.

In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully
connected feed-forward network, which is applied to each position separately and identically. 
This consists of two linear transformations with a ReLU activation in between.
Similarly to other sequence transduction models,
we use learned embeddings to convert the input tokens and output tokens to vectors of dimension dmodel.
We also use the usual learned linear transformation and softmax function to convert the decoder output to predicted next-token probabilities

Since our model contains no recurrence and no convolution, in order for the model to make use of the
order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence.
To this end, we add "positional encodings" to the input embeddings at the bottoms of the encoder and decoder stacks. 


